//*******************************************************************************
//
//    Copyright 2020 Microsoft
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
//*******************************************************************************

// tslint:disable: max-line-length
// tslint:disable: variable-name

//
// "Jac256": Weierstrass curve a=-3, E: gy:^2 = x^3 - 3x + 152961, p = 2^256-189
//
var curve_Jac256 = {
    // Curve ID, 2 x targeted security: level, order bitlength, prime bitlength
    info: ["Jac256", 256, 256, 256],
    // Name
    name: "Jac256",
    // Curve Type 0 = Weierstrass, 1 Twisted Edwards
    type: 0,
    // Prime p = 2^256-189
    p: [0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "a"
    a: [0x40, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "b"
    b: [0x81, 0x55, 0x02].reverse(),
    // Order of the group
    order: [0x25, 0xa8, 0x51, 0x47, 0x29, 0x20, 0xab, 0x20, 0x60, 0x5c, 0x26, 0xea, 0x75, 0x82, 0x3c, 0xe4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // x(generator)
    gx: [1], //, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    // gy:(generator)
    gy: [0x77, 0x6c, 0xb5, 0xc2, 0x06, 0x63, 0xf4, 0x0b, 0xc1, 0x4e, 0x89, 0x75, 0x93, 0x2f, 0x2c, 0xd0, 0x6b, 0xdd, 0xee, 0xce, 0x6c, 0xc9, 0x82, 0xfc, 0xd7, 0x66, 0xe4, 0xc1, 0x53, 0x18, 0x6f, 0x69].reverse(),
    // co-factor
    cf: 1
};

//
// "Ted256": twisted Edwards curve a=-1, E: -x^2 + gy:^2 = 1 + 15342x^2gy:^2, p = 2^256-189
//
var curve_Ted256 = {
    // Curve ID, 2 x targeted security: level, order bitlength, prime bitlength
    info: ["Ted256", 256, 254, 256],
    // Name
    name: "Ted256",
    // Curve Type 0 = Weierstrass, 1 Twisted Edwards
    type: 1,
    // Prime p = 2^256-189
    p: [0x43, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "a"
    a: [0x42, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "d"
    d: [0xEE, 0x3B].reverse(),
    // Order of the subgroup
    order: [0xad, 0xb4, 0x22, 0x11, 0x6f, 0x4e, 0xb8, 0xe5, 0x64, 0xbc, 0xa6, 0xd0, 0x5a, 0xa5, 0x6a, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f].reverse(),
    // gx:(generator)
    gx: [0x0D],
    // gy:(generator)
    gy: [0xba, 0xad, 0x1c, 0x33, 0xb5, 0x6f, 0x7f, 0x70, 0x3f, 0x30, 0x4d, 0x82, 0x63, 0x6d, 0x2a, 0xbe, 0xbf, 0x46, 0xa0, 0x9f, 0xb3, 0x30, 0xd3, 0xa3, 0xdb, 0x76, 0x12, 0x2a, 0x1e, 0xb4, 0x0a, 0x7d].reverse(),
    // co-factor
    cf: 4
};

//
// "Jac384": Weierstrass curve a=-3, E: gy:^2 = x^3 - 3x - 34568, p = 2^384-317
//
var curve_Jac384 = {
    // Curve ID, 2 x targeted security: level, order bitlength, prime bitlength
    info: ["Jac384", 384, 384, 384],
    // Name
    name: "Jac384",
    // Curve Type 0 = Weierstrass, 1 Twisted Edwards
    type: 0,
    // Prime p = 2^384-317
    p: [0xC3, 0xFE, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "a"
    a: [0xC0, 0xFE, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "b"
    b: [0xBB, 0x77, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Order of the group
    order: [0xb9, 0x61, 0x0e, 0x7b, 0xf6, 0x81, 0x4d, 0x60, 0x7a, 0xe2, 0x37, 0x4c, 0x3d, 0x9d, 0xda, 0xbe, 0x81, 0x68, 0x5d, 0xeb, 0x1e, 0xaf, 0x1e, 0xd6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // x(generator)
    gx: [0x02],
    // gy:(generator)
    gy: [0x43, 0x6f, 0xa6, 0x3e, 0x50, 0xbf, 0xcb, 0x5b, 0x86, 0x0f, 0xd3, 0xd5, 0xba, 0xd0, 0xa3, 0xb4, 0xa2, 0xff, 0x15, 0x8d, 0xc5, 0x0d, 0x33, 0x73, 0x26, 0xf8, 0x04, 0x2f, 0x42, 0xed, 0x34, 0x80, 0xbd, 0x5d, 0x3e, 0x66, 0xe0, 0x63, 0xe7, 0x71, 0xdc, 0xb4, 0x87, 0x4b, 0xcb, 0x82, 0x9f, 0x3c].reverse(),
    // co-factor
    cf: 1
};

//
// "Ted384": twisted Edwards curve a=-1, E: -x^2 + gy:^2 = 1 + 333194x^2gy:^2, p = 2^384-317
//
var curve_Ted384 = {
    // Curve ID, 2 x targeted security: level, order bitlength, prime bitlength
    info: ["Ted384", 384, 382, 384],
    // Name
    name: "Ted384",
    // Curve Type 0 = Weierstrass, 1 Twisted Edwards
    type: 1,
    // Prime p = 2^2^384-317
    p: [0xC3, 0xFE, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "a"
    a: [0xC2, 0xFE, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff].reverse(),
    // Parameter "d"
    d: [0x8A, 0x15, 0x05].reverse(),
    // Order of the subgroup
    order: [0x25, 0x6e, 0x42, 0x70, 0x1f, 0xd7, 0xd6, 0x51, 0xe4, 0xf4, 0x39, 0x8e, 0x45, 0xa0, 0x13, 0x5a, 0xa2, 0x59, 0xa2, 0xd5, 0x1e, 0xd1, 0xd7, 0xec, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f].reverse(),
    // x(generator)
    gx: [0x08],
    // gy:(generator)
    gy: [0xee, 0x5b, 0x7f, 0xfa, 0xf5, 0xac, 0xa4, 0x34, 0xd5, 0xba, 0xba, 0xfe, 0x60, 0x38, 0x00, 0x2f, 0xd7, 0xc6, 0x53, 0xe7, 0x8a, 0x8a, 0x79, 0xbd, 0x8e, 0xff, 0x0b, 0x93, 0x4c, 0x7b, 0x5c, 0xaa, 0x9d, 0x61, 0xaa, 0x94, 0x17, 0x47, 0xd4, 0x5b, 0xb6, 0xe9, 0x6c, 0x13, 0xba, 0xda, 0x9c, 0x74].reverse(),
    // co-factor
    cf: 4
};

if (typeof cryptoECC !== "undefined") {
    // Add curves to ECC object
    cryptoECC.curves["TED-256"] = curve_Ted256;
    cryptoECC.curves["TED-384"] = curve_Ted384;
    cryptoECC.curves["JAC-256"] = curve_Jac256;
    cryptoECC.curves["JAC-384"] = curve_Jac384;
}
